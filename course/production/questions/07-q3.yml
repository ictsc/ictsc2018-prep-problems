type: ChoiceQuestion
id: 07_q3
value: 10
shuffle: true
prompt: |

    ### Packet filtering問題 No.2(続き)
    <br/>
    突然ですがあなたは学内ネットワークの管理者になりました．そこでは`sshなんて通しちゃダメ`という謎の言葉があるドキュメントがあり，あなたはそれに従う必要が出てきました．<br/>
    前述したコードには<1>,<2>,<3>という穴があり，そこを選択肢から一つ選んで埋めてください<br/>
    #### 選択肢<br/>
    - A<br/>
        - <1>:`22`<br/>
        - <2>:`tcpLayer != nil`<br/>
        - <3>:`isSelecteExcludedInMACAddr(&packet, ethernetPacket.SrcMAC.String())`<br/>
    <br/>
    - B<br/>
        - <1>:`80`<br/>
        - <2>:`ethernetLayer != nil`<br/>
        - <3>:`isSelecteExcludedInMACAddr(&packet, ethernetPacket.SrcMAC.String())`<br/>
    - C<br/>
        - <1>:`23`<br/>
        - <2>:`tcpLayer != nil`<br/>
        - <3>:`isSelectedExcludeInIP(&packet, ip.SrcIP.String())`<br/>
    - D<br/>
        - <1>:`22`<br/>
        - <2>:`tcpLayer != nil`<br/>
        - <3>:`isSelectedExcludeInPort(&packet, tcp.SrcPort.String())`<br/>
    <br/>
    #### コード(前回ページのコードと同一)<br/>
    ``` go
    package main

    import (
        "fmt"
        "os"

        "github.com/AkihiroSuda/go-netfilter-queue"
        "github.com/google/gopacket/layers"
    )

    const NFQUEUE_NUM_ID = 10
    const MAX_PACKET_IN_QUEUE = 300

    const EXCLUDE_IN_IP = "192.168.0.2"
    const EXCLUDE_IN_Port = <1>

    func isSelectedExcludeInIP(packet *netfilter.NFPacket, target string) {
        if target == EXCLUDE_IN_IP {
            packet.SetVerdict(netfilter.NF_DROP)
            fmt.Println("Drop is IP")
        }
    }
    func isSelectedExcludeInPort(packet *netfilter.NFPacket, target string) {
        if target == EXCLUDE_IN_Port {
            packet.SetVerdict(netfilter.NF_DROP)
            fmt.Println("Drop is Port")
        }
    }
    func isSelecteExcludedInMACAddr(packet *netfilter.NFPacket, target string) {
          if target == EXCLUDE_IN_MACAddr {
              packet.SetVerdict(netfilter.NF_DROP)
              fmt.Println("Drop is MACAddress")
          }
    }

    
    func main() {
        var err error

        nfq, err := netfilter.NewNFQueue(NFQUEUE_NUM_ID, MAX_PACKET_IN_QUEUE, netfilter.NF_DEFAULT_PACKET_SIZE)
        if err != nil {
            fmt.Println(err)
            os.Exit(1)
        }
        defer nfq.Close()
        packets := nfq.GetPackets()
        for true {
            select {
            case packet := <-packets:
                ethernetLayer := packet.Packet.Layer(layers.LayerTypeEthernet)
                ipLayer := packet.Packet.Layer(layers.LayerTypeIPv4)
                tcpLayer := packet.Packet.Layer(layers.LayerTypeTCP)
                if ipLayer != nil {
                    ip, _ := ipLayer.(*layers.IPv4)
                    isSelectedExcludeInIP(&packet, ip.SrcIP.String())
                } else if <2>{
                    tcp, _ := tcpLayer.(*layers.TCP)
                    <3>
                }else {
                    packet.SetVerdict(netfilter.NF_ACCEPT)
                }
            }
        }
    }
    ```
    <br/><br/>
choices:

  - A
  - B
  - C
  - ~CORRECT~ D


answer_explanation:
  D<br/>
